coroutine_creates - Creates a coroutine context block

    Parameters: cofunction - Pointer to coroutine function
                stacksizep - Optional pointer to stack size
                hardfail   - Boolean hardfail (panics on error)

    Allocates and initialises a context block and stack memory area.
    The stacksize is rounded up to the nearest page size and
    stacksizep can be NULL in which case the default is 8192 bytes.

    Returns: an opaque pointer to the coroutine context.
             Writes the usable stacksize back to stacksizep.

    On error: sets errno, returns NULL or calls coroutine_panic


coroutine_destroy - Frees a coroutine context block

    Takes the opaque pointer to the allocated context block and
    frees the associated memory. Also overwrites the magic number.
 
    Returns nothing and panics on error


coroutine_hasended - Check the CTX_YIELDED entry

    Takes the opaque pointer to the allocated context block
    Returns: 0 if the coroutine is still yielding
             1 if the coroutine has ended (or hasn't started)
    Panics on error


coroutine_getparam - Get a pointer to the CTX_EXTRAPARAM entry

    Takes the opaque pointer to the allocated context block
    Returns a pointer to the context structure's extra parameter entry
    Panics on error


coroutine_call (__cdecl) - Call or yield back to the coroutine

    Takes the opaque pointer to the allocated context block and calls or
    yields back into the context coroutine. The coroutine can:

    - call coroutine_yield to yield back here, in which case the return
    value is always -EAGAIN and coroutine_hasended() returns false or

    - exit normally with a return code, in which case the return value
    is that return code and coroutine_hasended() returns true.

    In the former case, this call will yield back to the instruction
    following the call to coroutine_yield().

    Returns: -EAGAIN on yield from coroutine
             0 on return from yield()
    Panics on error

--end--
